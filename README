Before you get started

   1. Install latest Systemc
   2. Add environment variable WS_ROOT to your bashrc. Point it to the directory where you would like to have your files
   3. Worspace is structured as follows
      workspace
      - lib - library components go here
      - templates - these are templates for creating projects
      - tools - some tools to run simulations
      - include - common files for simulations
      - projects - project files
   4. Tools has a setup file which can create directory structure for each library component or project. Setup also sets environment variables and aliases to navigate through the directories
   5. Each project or library component directory is structured in the following way
      - sc
      - hdl
      - fpga
      Each of these directories in turn are structured as follows
      - include
      - rtl
      - sim
      - tb
      - tests
      In fpga directory, there is an additional image directory.
      Makefiles currently dont support bitstream generation. Feature will be added in future releases.
   6. All makefiles are built in using templates by setup. All you need to do is write code to implement your logic and run simulations

--------------------------------------------------------------------------------

To get your setup running these are the steps you need to follow

   1. Set $WS_ROOT variable in your aliases
      For example:
      export WS_ROOT ~/workspace
 
   2. To create a new library component or project
      > cd $WS_ROOT/tools
      > source setup
 
      Answer any questions from the script according to your need.
      Setup will also create various aliases and env variables for your use.
      These are
      PROJ_ROOT - points to project or lib component area
      PROJ_HOME - points to specific project or lib component selected during setup
      PROJ_SC_HOME - points to sc directory in project or lib component selected
      PROJ_FPGA_HOME - points to fpga directory in project or lib component selected
      PROJ_HDL_HOME - points to hdl directory in project or lib component selected
     
      PROJ_SC_INC - include directory in sc
      PROJ_SC_SIM - sim directory in sc
      PROJ_SC_RTL - rtl directory in sc
      PROJ_SC_TB - tb directory in sc
      PROJ_SC_TESTS - tests directory in sc
     
      PROJ_HDL_INC - include directory in hdl
      PROJ_HDL_SIM - sim directory in hdl
      PROJ_HDL_RTL - rtl directory in hdl
      PROJ_HDL_TB - tb directory in hdl
      PROJ_HDL_TESTS - tests directory in hdl
     
      PROJ_FPGA_INC - include directory in fpga
      PROJ_FPGA_SIM - sim directory in fpga
      PROJ_FPGA_RTL - rtl directory in fpga
      PROJ_FPGA_TB - tb directory in fpga
      PROJ_FPGA_TESTS - tests directory in fpga
      PROJ_FPGA_IMAGE - image directory in fpga
     
      alias scsim="cd $PROJ_SC_SIM"
      alias scrtl="cd $PROJ_SC_RTL"
      alias sctb="cd $PROJ_SC_TB"
      alias sctb="cd $PROJ_SC_TESTS"
      alias scinc="cd $PROJ_SC_INC"
      
      alias fpgasim="cd $PROJ_FPGA_SIM"
      alias fpgartl="cd $PROJ_FPGA_RTL"
      alias fpgatb="cd $PROJ_FPGA_TB"
      alias fpgatb="cd $PROJ_FPGA_TESTS"
      alias fpgainc="cd $PROJ_FPGA_INC"
      alias fpgaimage="cd $PROJ_FPGA_IMAGE"
      
      alias hdlsim="cd $PROJ_HDL_SIM"
      alias hdlrtl="cd $PROJ_HDL_RTL"
      alias hdltb="cd $PROJ_HDL_TB"
      alias hdltb="cd $PROJ_HDL_TESTS"
      alias hdlinc="cd $PROJ_HDL_INC"
 
   3. To run simulations (do step 1 and 2 first)
	  > scsim
	  > make all

      Make flow in this setup has following features

	  To compile your code
	  > make comp

	  To run simulation
	  > make sim

	  To open simulation vcd file with gtkwave
	  > nake vcd

	  To create sim file which will run the simulation
	  > make gen_sim

   4. This setup creates a sim file for running simulations.
      All you need to worry about is to write your logic in systemc
	  To achieve this, gen_sim_file.pl script in include area is used.
	  There are reasonable restrictions on coding style to use this script.
	  - All signals must be added in a new line
	  - HDL code should be clean without any pointers

      The script
	  - reads through the code
	  - identifies instantiated components
	  - prepares a list of signals
	  - adds these signals to trace
	  - creates a sim file with these trace calls
	  - also dumps a log file
	  - also dumps a file containing signal hierarchy
	  - also dumps a yml file containing signal hierarchy

      The created sim file is named sim.cpp
	  The vcd file generated by sim file will be named sim.vcd

      Feature to redirect make output and errors to log files is yet to be implemented
	  Feature to control dump hierarchy depth is yet to be implemented

--------------------------------------------------------------------------------

Keep calm and code.
	  
	  